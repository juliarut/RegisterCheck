/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProfileProfileRouteImport } from './routes/Profile/ProfileRoute'
import { Route as NotificationsNotificationRouteImport } from './routes/Notifications/NotificationRoute'
import { Route as LoginLoginRouteImport } from './routes/Login/LoginRoute'
import { Route as HomeHomeRouteImport } from './routes/Home/HomeRoute'
import { Route as EmployeesEmployeesRouteImport } from './routes/Employees/EmployeesRoute'
import { Route as DashboardDashboardRouteImport } from './routes/Dashboard/DashboardRoute'
import { Route as AddEmployeeAddEmployeeRouteImport } from './routes/AddEmployee/AddEmployeeRoute'

// Create/Update Routes

const ProfileProfileRouteRoute = ProfileProfileRouteImport.update({
  id: '/Profile/ProfileRoute',
  path: '/Profile/ProfileRoute',
  getParentRoute: () => rootRoute,
} as any)

const NotificationsNotificationRouteRoute =
  NotificationsNotificationRouteImport.update({
    id: '/Notifications/NotificationRoute',
    path: '/Notifications/NotificationRoute',
    getParentRoute: () => rootRoute,
  } as any)

const LoginLoginRouteRoute = LoginLoginRouteImport.update({
  id: '/Login/LoginRoute',
  path: '/Login/LoginRoute',
  getParentRoute: () => rootRoute,
} as any)

const HomeHomeRouteRoute = HomeHomeRouteImport.update({
  id: '/Home/HomeRoute',
  path: '/Home/HomeRoute',
  getParentRoute: () => rootRoute,
} as any)

const EmployeesEmployeesRouteRoute = EmployeesEmployeesRouteImport.update({
  id: '/Employees/EmployeesRoute',
  path: '/Employees/EmployeesRoute',
  getParentRoute: () => rootRoute,
} as any)

const DashboardDashboardRouteRoute = DashboardDashboardRouteImport.update({
  id: '/Dashboard/DashboardRoute',
  path: '/Dashboard/DashboardRoute',
  getParentRoute: () => rootRoute,
} as any)

const AddEmployeeAddEmployeeRouteRoute =
  AddEmployeeAddEmployeeRouteImport.update({
    id: '/AddEmployee/AddEmployeeRoute',
    path: '/AddEmployee/AddEmployeeRoute',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/AddEmployee/AddEmployeeRoute': {
      id: '/AddEmployee/AddEmployeeRoute'
      path: '/AddEmployee/AddEmployeeRoute'
      fullPath: '/AddEmployee/AddEmployeeRoute'
      preLoaderRoute: typeof AddEmployeeAddEmployeeRouteImport
      parentRoute: typeof rootRoute
    }
    '/Dashboard/DashboardRoute': {
      id: '/Dashboard/DashboardRoute'
      path: '/Dashboard/DashboardRoute'
      fullPath: '/Dashboard/DashboardRoute'
      preLoaderRoute: typeof DashboardDashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/Employees/EmployeesRoute': {
      id: '/Employees/EmployeesRoute'
      path: '/Employees/EmployeesRoute'
      fullPath: '/Employees/EmployeesRoute'
      preLoaderRoute: typeof EmployeesEmployeesRouteImport
      parentRoute: typeof rootRoute
    }
    '/Home/HomeRoute': {
      id: '/Home/HomeRoute'
      path: '/Home/HomeRoute'
      fullPath: '/Home/HomeRoute'
      preLoaderRoute: typeof HomeHomeRouteImport
      parentRoute: typeof rootRoute
    }
    '/Login/LoginRoute': {
      id: '/Login/LoginRoute'
      path: '/Login/LoginRoute'
      fullPath: '/Login/LoginRoute'
      preLoaderRoute: typeof LoginLoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/Notifications/NotificationRoute': {
      id: '/Notifications/NotificationRoute'
      path: '/Notifications/NotificationRoute'
      fullPath: '/Notifications/NotificationRoute'
      preLoaderRoute: typeof NotificationsNotificationRouteImport
      parentRoute: typeof rootRoute
    }
    '/Profile/ProfileRoute': {
      id: '/Profile/ProfileRoute'
      path: '/Profile/ProfileRoute'
      fullPath: '/Profile/ProfileRoute'
      preLoaderRoute: typeof ProfileProfileRouteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/AddEmployee/AddEmployeeRoute': typeof AddEmployeeAddEmployeeRouteRoute
  '/Dashboard/DashboardRoute': typeof DashboardDashboardRouteRoute
  '/Employees/EmployeesRoute': typeof EmployeesEmployeesRouteRoute
  '/Home/HomeRoute': typeof HomeHomeRouteRoute
  '/Login/LoginRoute': typeof LoginLoginRouteRoute
  '/Notifications/NotificationRoute': typeof NotificationsNotificationRouteRoute
  '/Profile/ProfileRoute': typeof ProfileProfileRouteRoute
}

export interface FileRoutesByTo {
  '/AddEmployee/AddEmployeeRoute': typeof AddEmployeeAddEmployeeRouteRoute
  '/Dashboard/DashboardRoute': typeof DashboardDashboardRouteRoute
  '/Employees/EmployeesRoute': typeof EmployeesEmployeesRouteRoute
  '/Home/HomeRoute': typeof HomeHomeRouteRoute
  '/Login/LoginRoute': typeof LoginLoginRouteRoute
  '/Notifications/NotificationRoute': typeof NotificationsNotificationRouteRoute
  '/Profile/ProfileRoute': typeof ProfileProfileRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/AddEmployee/AddEmployeeRoute': typeof AddEmployeeAddEmployeeRouteRoute
  '/Dashboard/DashboardRoute': typeof DashboardDashboardRouteRoute
  '/Employees/EmployeesRoute': typeof EmployeesEmployeesRouteRoute
  '/Home/HomeRoute': typeof HomeHomeRouteRoute
  '/Login/LoginRoute': typeof LoginLoginRouteRoute
  '/Notifications/NotificationRoute': typeof NotificationsNotificationRouteRoute
  '/Profile/ProfileRoute': typeof ProfileProfileRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/AddEmployee/AddEmployeeRoute'
    | '/Dashboard/DashboardRoute'
    | '/Employees/EmployeesRoute'
    | '/Home/HomeRoute'
    | '/Login/LoginRoute'
    | '/Notifications/NotificationRoute'
    | '/Profile/ProfileRoute'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/AddEmployee/AddEmployeeRoute'
    | '/Dashboard/DashboardRoute'
    | '/Employees/EmployeesRoute'
    | '/Home/HomeRoute'
    | '/Login/LoginRoute'
    | '/Notifications/NotificationRoute'
    | '/Profile/ProfileRoute'
  id:
    | '__root__'
    | '/AddEmployee/AddEmployeeRoute'
    | '/Dashboard/DashboardRoute'
    | '/Employees/EmployeesRoute'
    | '/Home/HomeRoute'
    | '/Login/LoginRoute'
    | '/Notifications/NotificationRoute'
    | '/Profile/ProfileRoute'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AddEmployeeAddEmployeeRouteRoute: typeof AddEmployeeAddEmployeeRouteRoute
  DashboardDashboardRouteRoute: typeof DashboardDashboardRouteRoute
  EmployeesEmployeesRouteRoute: typeof EmployeesEmployeesRouteRoute
  HomeHomeRouteRoute: typeof HomeHomeRouteRoute
  LoginLoginRouteRoute: typeof LoginLoginRouteRoute
  NotificationsNotificationRouteRoute: typeof NotificationsNotificationRouteRoute
  ProfileProfileRouteRoute: typeof ProfileProfileRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  AddEmployeeAddEmployeeRouteRoute: AddEmployeeAddEmployeeRouteRoute,
  DashboardDashboardRouteRoute: DashboardDashboardRouteRoute,
  EmployeesEmployeesRouteRoute: EmployeesEmployeesRouteRoute,
  HomeHomeRouteRoute: HomeHomeRouteRoute,
  LoginLoginRouteRoute: LoginLoginRouteRoute,
  NotificationsNotificationRouteRoute: NotificationsNotificationRouteRoute,
  ProfileProfileRouteRoute: ProfileProfileRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/AddEmployee/AddEmployeeRoute",
        "/Dashboard/DashboardRoute",
        "/Employees/EmployeesRoute",
        "/Home/HomeRoute",
        "/Login/LoginRoute",
        "/Notifications/NotificationRoute",
        "/Profile/ProfileRoute"
      ]
    },
    "/AddEmployee/AddEmployeeRoute": {
      "filePath": "AddEmployee/AddEmployeeRoute.tsx"
    },
    "/Dashboard/DashboardRoute": {
      "filePath": "Dashboard/DashboardRoute.tsx"
    },
    "/Employees/EmployeesRoute": {
      "filePath": "Employees/EmployeesRoute.tsx"
    },
    "/Home/HomeRoute": {
      "filePath": "Home/HomeRoute.tsx"
    },
    "/Login/LoginRoute": {
      "filePath": "Login/LoginRoute.tsx"
    },
    "/Notifications/NotificationRoute": {
      "filePath": "Notifications/NotificationRoute.tsx"
    },
    "/Profile/ProfileRoute": {
      "filePath": "Profile/ProfileRoute.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
